
 What is the Windows API?

The Windows API (WinAPI) is Microsoft’s public interface that lets applications interact with the Windows operating system. It exposes a broad set of services — from GUI and file I/O to process and memory management — enabling user-mode programs to request functionality implemented in lower privilege layers without needing direct hardware access.

---

 Primary goals

 Abstract low-level details so applications don't need direct hardware access.
 Provide system services (GUI, files, threads, memory, security, etc.).
 Preserve compatibility across Windows releases.
 Offer consistent programming contracts for application developers.

---

 API categories

The Windows API surface can be split into two broad groups:

 User-mode APIs
  High-level, documented interfaces exposed by DLLs such as `kernel32.dll`, `user32.dll`, `advapi32.dll`, etc. These are the APIs most developers use day-to-day.

 Native (NT) APIs
  Lower-level interfaces exposed by `ntdll.dll` (functions prefixed with `Nt`/`Zw`). These are closer to the kernel’s system services and are used by the OS and advanced tooling.

---

 User mode vs Kernel mode

| User Mode                            | Kernel Mode                                                |
| ------------------------------------ | ---------------------------------------------------------- |
| Runs with restricted privileges      | Runs with full system privileges (Ring 0)                  |
| Cannot access hardware directly      | Direct hardware and core resource access                   |
| Application crashes usually isolated | Crashes may bring down the whole system (BSOD)             |
| Uses Win32 APIs like `CreateFile`    | Implements core services (e.g., underlying `NtCreateFile`) |

> Understanding this separation is important for both defensive and offensive security research — many monitoring solutions operate in user mode and rely on hooks or interceptions at that layer.

---

 API layers: Win32, NT, and Syscalls

# Win32 (High-level)

 The familiar developer-facing API (e.g., `CreateFileW`, `OpenProcess`, `VirtualAllocEx`).
 Implemented in DLLs such as `kernel32.dll` and `user32.dll`.
 Designed for portability and backward compatibility.

# NT API (Low-level)

 Exposed by `ntdll.dll`, with function names prefixed by `Nt` or `Zw` (e.g., `NtOpenProcess`).
 Presents a more direct mapping to underlying system services and kernel behavior.
 Commonly used by OS components and advanced system tools.

# Syscalls

 The kernel’s entry points for requests from user mode.
 Syscalls form the boundary between `ntdll.dll` and the kernel.
 Security tools and researchers pay attention to syscall behavior because calls at this level can be used for low-level interactions; defenders should be aware of techniques that interact with or mimic syscalls.

---

 Naming prefixes in Windows internals

Kernel APIs and internal routines typically use well-known prefixes that indicate the subsystem or functional area. These are especially useful when reading kernel code, drivers, or reverse-engineering binaries.

| Prefix |                        Subsystem | Example                | Purpose                                          |
| ------ | -------------------------------: | ---------------------- | ------------------------------------------------ |
| `Cm`   |            Configuration Manager | `CmRegisterCallbackEx` | Registry and configuration callbacks             |
| `Ex`   |                  Executive layer | `ExAllocatePool`       | Core helpers: allocation, sync primitives        |
| `Hal`  | HAL (Hardware Abstraction Layer) | `HalGetAdapter`        | Hardware / platform-specific services            |
| `Io`   |                      I/O Manager | `IoAllocateIrp`        | Device I/O and IRP management                    |
| `Ke`   |                      Kernel core | `KeSetEvent`           | Scheduling, signaling, IRQL management           |
| `Mm`   |                   Memory Manager | `MmUnlockPages`        | Virtual memory and paging                        |
| `Ob`   |                   Object Manager | `ObReferenceObject`    | Handle and object management                     |
| `Po`   |                    Power Manager | `PoSetPowerState`      | Power state transitions                          |
| `Tm`   |              Transaction Manager | `TmCommitTransaction`  | Kernel transaction APIs                          |
| `Nt`   | Native API / user-mode interface | `NtCreateFile`         | Invoked via `ntdll.dll` syscalls                 |
| `Zw`   |           Kernel-mode native API | `ZwCreateFile`         | Kernel-mode variant, behavior differs by context |

---

 Nt vs Zw — quick notes

 `Nt` functions are the native interfaces typically used from user mode.
 `Zw` variants are the kernel-mode forms and may behave differently with respect to access checks and return conventions.
 The same underlying service is often reached either way, but semantics can differ depending on the caller’s CPU mode and intent.

---

 Key DLLs and responsibilities

| DLL            | Common role                                                           |
| -------------- | --------------------------------------------------------------------- |
| `kernel32.dll` | High-level Win32 services: file I/O, memory, synchronization, threads |
| `ntdll.dll`    | Low-level NT API, syscall stubs, and runtime support                  |
| `user32.dll`   | Window management, input, and user-interface services                 |
| `advapi32.dll` | Security APIs: registry, services, tokens, crypto primitives          |
| `gdi32.dll`    | Graphics Device Interface (2D drawing, fonts, basic rendering)        |

> Many runtime protections and monitoring solutions hook into functions in `ntdll.dll` and other common DLLs, so defenders and researchers study these layers closely.
